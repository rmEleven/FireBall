class GameMenu{constructor(t){console.log("GameMenu Created"),this.root=t,this.$menu=$('\n            <div class="game-menu">\n                <div class="game-menu-field">\n                    <div class="game-menu-field-item game-menu-field-item-single-mode">\n                        单人模式\n                    </div>\n                    <div class="game-menu-field-item game-menu-field-item-multi-mode">\n                        多人模式\n                    </div>\n                    <div class="game-menu-field-item game-menu-field-item-settings">\n                        设置\n                    </div>\n                </div>\n            </div>\n        '),this.hide(),this.root.$game.append(this.$menu),this.$single_mode=this.$menu.find(".game-menu-field-item-single-mode"),this.$multi_mode=this.$menu.find(".game-menu-field-item-multi-mode"),this.$settings=this.$menu.find(".game-menu-field-item-settings"),this.start()}start(){this.add_listening_events()}add_listening_events(){let t=this;this.$single_mode.click((function(){console.log("single-mode clicked"),t.hide(),t.root.playground.show()})),this.$multi_mode.click((function(){console.log("multi-mode clicked")})),this.$settings.click((function(){console.log("settings clicked")}))}show(){this.$menu.show()}hide(){this.$menu.hide()}}let last_timestamp,GAME_OBJECTS=[];class GameObject{constructor(){GAME_OBJECTS.push(this),this.has_called_start=!1,this.timedelta=0}start(){}update(){}on_destroy(){}destroy(){this.on_destroy();for(let t=0;t<GAME_OBJECTS.length;t++)if(GAME_OBJECTS[t]===this){GAME_OBJECTS.splice(t,1);break}}}let GAME_ANIMATION=function(t){for(let e=0;e<GAME_OBJECTS.length;e++){let s=GAME_OBJECTS[e];s.has_called_start?(s.timedelta=t-last_timestamp,s.update()):(s.start(),s.has_called_start=!0)}last_timestamp=t,requestAnimationFrame(GAME_ANIMATION)};requestAnimationFrame(GAME_ANIMATION);class GameMap extends GameObject{constructor(t){console.log("GameMap Created"),super(),this.playground=t,this.$canvas=$("<canvas>画布</canvas>"),this.ctx=this.$canvas[0].getContext("2d"),this.ctx.canvas.width=this.playground.width,this.ctx.canvas.height=this.playground.height,this.playground.$playground.append(this.$canvas),this.start()}start(){}update(){this.render()}render(){this.ctx.fillStyle="rgb(219,238,252)",this.ctx.fillRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height)}}class Player extends GameObject{constructor(t,e,s,i,a,n,h){console.log("Player Created"),super(),this.playground=t,this.ctx=this.playground.gameMap.ctx,this.x=e,this.y=s,this.radius=i,this.color=a,this.speed=n,this.is_me=h,this.eps=.1}start(){}update(){this.render()}render(){this.ctx.fillStyle=this.color,this.ctx.beginPath(),this.ctx.arc(this.x,this.y,this.radius,0,2*Math.PI,!1),this.ctx.fill()}}class GamePlayground{constructor(t){console.log("GamePlayground Created"),this.root=t,this.$playground=$('\n            <div class="game-playground">\n            </div>\n        '),this.root.$game.append(this.$playground),this.width=this.$playground.width(),this.height=this.$playground.height(),this.gameMap=new GameMap(this),this.players=[],this.players.push(new Player(this,this.width/2,this.height/2,.05*this.height,"rgb(83,131,236)",.15*this.height,!0)),this.start()}start(){this.add_listening_events()}add_listening_events(){}show(){this.$playground.show()}hide(){this.$playground.hide()}}export class Game{constructor(t){console.log("Game Created"),this.id=t,this.$game=$("#"+t),this.menu=new GameMenu(this),this.playground=new GamePlayground(this),this.start()}start(){}}
